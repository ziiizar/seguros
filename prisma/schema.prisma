// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
  // url       = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole  @default(AGENT)
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model verificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model resetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Lead {
  id                 String             @id @default(uuid())
  name               String
  phone              String?
  email              String?
  age                Int?
  zipCode            Int?
  status             ClientStatus       @default(NEW)
  insuranceRequested InsuranceRequested @default(GENERAL)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime?
  active             Boolean            @default(true)
  surveyAnswers      surveyAnswers[]
}

model surveyAnswers {
  id        String    @id @default(uuid())
  leadId    String
  question  String
  answer    String
  createdAt DateTime
  Lead      Lead      @relation(fields: [leadId], references: [id])
}

enum UserRole {
  ADMIN
  AGENT
}

enum ClientStatus {
  NEW
  CONTACTED
  REJECTED
  ENROLLED
}

enum InsuranceRequested {
  HEALTH
  LIFE
  GENERAL
}
